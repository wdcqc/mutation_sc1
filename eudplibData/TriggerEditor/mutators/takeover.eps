import PluginVariables as msqcvar;
import utils;
import constants;

function init() {
}

const spawn_list = [1, 228, 228, 32, 228, 0, 34, 5, 8, 228, 12, 228, 228, 228, 228, 228, 2, 3, 7, 228, 228, 228, 228, 228, 50, 47, 47, 62, 50, 38, 46, 44, 45, 37, 39, 43, 37, 41, 41, 228, 37, 228, 228, 228, 228, 228, 228, 228, 63, 69, 65, 228, 228, 84, 65, 228, 64, 65, 66, 67, 68, 70, 228, 72, 71, 83, 60, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228];

const to_build_x = EUDArray(20);
const to_build_y = EUDArray(20);
const to_build_u = EUDArray(20);
const to_build_p = EUDArray(20);
var to_build_count = 0;
var to_build_delay = 0;

function loopdeath_player(player, ut, x, y, epd) {
	if(ut >= 106) {
		if(spawn_list[ut - 106] < 106) {
			const cm = EPDCUnitMap(epd);
			const lap = cm.lastAttackingPlayer;
			if(lap < 6 && to_build_count < 20) {
				to_build_x[to_build_count] = x;
				to_build_y[to_build_count] = y;
				to_build_u[to_build_count] = ut;
				to_build_p[to_build_count] = lap;
				to_build_count += 1;
				to_build_delay = 1;
			}
		}
	}
}

var next_spawn = 30;
function loop32_player(epd, player) {
	if(constants.is_computer[player]) {
		const cm = EPDCUnitMap(epd);
		if(cm.unitType >= 106 && ElapsedTime(AtLeast, next_spawn) && MemoryXEPD(epd + 220 / 4, Exactly, 270794752, 270794752)) {
			const spawn_ut = spawn_list[cm.unitType - 106];
			if(spawn_ut < 106) {
				setloc_epd("shared", epd + 40 / 4);
				CreateUnit(1, spawn_ut, "shared", player);
				dilateloc("shared", 128, 128);
				utils.decide_target_if_comp("target", player);
				utils.order_computer(spawn_ut, player, "shared", Patrol, "target");
				dilateloc("shared", -128, -128);
			}
		}
	}
}

function loop1_normal() {
	if(to_build_delay > 0) {
		to_build_delay -= 1;
	}
	else {
		if(to_build_count > 0) {
			for(var i = 0; i < to_build_count; i++) {
				setloc("shared", to_build_x[i], to_build_y[i]);
				const spawn_ptr, spawn_epd = cunitepdread_epd(EPD(0x00628438));
				if(spawn_ptr > 0) {
					const spawn_success = utils.safe_spawn(1, to_build_u[i], to_build_p[i], "shared", "buffer");
					if(spawn_success) {
						const spawn_cm = EPDCUnitMap(spawn_epd);
						if(spawn_cm.unitType == to_build_u[i] && spawn_cm.hp > 0) {
							SetMemoryXEPD(spawn_epd + 220 / 4, SetTo, 270794752, 270794752);
						}
					}
				}
			}
			to_build_count = 0;
		}
	}
}

function loop32_normal() {
	if(ElapsedTime(AtLeast, next_spawn)) {
		next_spawn += 50;
		if(Switch("game_hard", Set)) {
			next_spawn -= 20;
		}
	}
}